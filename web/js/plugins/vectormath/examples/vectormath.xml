<krpano version="1.0.8">
	<preview type="grid(cube,16,16,512,0xCCCCCC,0xFFFFFF,0x999999);" details="16" />
	
	<plugin name="vectormath" url="../../vectormath.swf" preload="true" />	
	
	<style name="cubeface" distorted="true" enabled="false" width="1000" height="1000" alpha="0.5" />
	<hotspot name="pano_f" style="cubeface" url="pano_f.jpg" ath="0"   atv="0"   rotate="0" />
	<hotspot name="pano_r" style="cubeface" url="pano_r.jpg" ath="90"  atv="0"   rotate="0" />
	<hotspot name="pano_l" style="cubeface" url="pano_l.jpg" ath="-90" atv="0"   rotate="0" />
	<hotspot name="pano_b" style="cubeface" url="pano_b.jpg" ath="180" atv="0"   rotate="0" />	
	<hotspot name="pano_u" style="cubeface" url="pano_u.jpg" ath="0"   atv="-90" rotate="0" />
	<hotspot name="pano_d" style="cubeface" url="pano_d.jpg" ath="0"   atv="90"  rotate="0" />	
	
	<action name="update_faces">
		plugin[vectormath].rotatevector(hotspot[pano_r].ath, hotspot[pano_r].atv, hotspot[pano_r].rotate,
			get(hotspot[pano_f].ath), get(hotspot[pano_f].atv), get(hotspot[pano_f].rotate), 90,0,0);
		plugin[vectormath].rotatevector(hotspot[pano_l].ath, hotspot[pano_l].atv, hotspot[pano_l].rotate,
			get(hotspot[pano_f].ath), get(hotspot[pano_f].atv), get(hotspot[pano_f].rotate), -90,0,0);
		plugin[vectormath].rotatevector(hotspot[pano_b].ath, hotspot[pano_b].atv, hotspot[pano_b].rotate,
			get(hotspot[pano_f].ath), get(hotspot[pano_f].atv), get(hotspot[pano_f].rotate), 180, 0,0);	
		plugin[vectormath].rotatevector(hotspot[pano_u].ath, hotspot[pano_u].atv, hotspot[pano_u].rotate,
			get(hotspot[pano_f].ath), get(hotspot[pano_f].atv), get(hotspot[pano_f].rotate), 0, -90,0);
		plugin[vectormath].rotatevector(hotspot[pano_d].ath, hotspot[pano_d].atv, hotspot[pano_d].rotate,
			get(hotspot[pano_f].ath), get(hotspot[pano_f].atv), get(hotspot[pano_f].rotate), 0, 90,0);	

	</action>
	
	
	<style 	name="slider_bg" url="white.jpg" zorder="1" align="bottom" width="400" height="8" x="0" handcursor="false" alpha="0.5" />

	<style 	name="slider_grip" url="white.jpg" zorder="2" align="lefttop" width="24" height="8" x="0" y="0"  
			effect="glow(0xFFFFFF,0.7,4,2);glow(0x000000,1,4,2);dropshadow(3,45,0x000000,2,0.6);"/>

	<plugin name="ath_slider_bg"   style="slider_bg" y="70" />
	<plugin name="ath_slider_grip" style="slider_grip" parent="ath_slider_bg"  
			onloaded="loadslider(ath,get(name),get(parent));"	
			ondown="startdragingslider(ath,get(name),get(parent));set(onover,'');"
			onup="stopdragingslider();set(onover,'showtext(ath);');"
			onover="showtext(ath);"
			/>	

	<plugin name="atv_slider_bg"   style="slider_bg" y="45" />
	<plugin name="atv_slider_grip" style="slider_grip" parent="atv_slider_bg" 
			onloaded="loadslider(atv,get(name),get(parent))"
			ondown="startdragingslider(atv,get(name),get(parent));set(onover,'');"
			onup="stopdragingslider();set(onover,'showtext(atv);');"
			onover="showtext(atv);"
			/>	

	<plugin name="rotate_slider_bg"   style="slider_bg" y="20" />
	<plugin name="rotate_slider_grip" style="slider_grip" parent="rotate_slider_bg"
			onloaded="loadslider(rotate,get(name),get(parent))"
			ondown="startdragingslider(rotate,get(name),get(parent));set(onover,'');"
			onup="stopdragingslider();set(onover,'showtext(rotate);');"
			onover="showtext(rotate);"
			/>

			
	<action name="loadslider">
		set(temp,hotspot[pano_f].%1);
		if(hotspot[pano_f].%1 == '',	set(hotspot[pano_f].%1,0); );
		if(temp == 'hotspot[pano_f].%1', set(hotspot[pano_f].%1,0); );
		
		set(val, get(hotspot[pano_f].%1)); 
		if( %1 == ath , div(val,360); add(val,.5); );
		if( %1 == atv , div(val,180); add(val,.5); );
		if( %1 == rotate , div(val,360); add(val,.5); );
		
		sub(xmax, plugin[%3].width, plugin[%2].width);
		mul(val, xmax);
		tween(plugin[%2].x, get(val));
		
		//update_faces();
	</action>
	
	<action name="startdragingslider">
		set(plugin[%2].backup_align, get(plugin[%2].align));
		set(plugin[%2].backup_edge,  get(plugin[%2].edge));

		plugin[%2].changeorigin(lefttop,lefttop);

		sub(mouse_x_offset, plugin[%2].x, mouse.x);
		sub(mouse_y_offset, plugin[%2].y, mouse.y);

		set(image_dragging,true);

		dragslider(%1,%2,%3);
	</action>


	<action name="stopdragingslider">
		set(image_dragging, false);
	</action>


	<action name="dragslider">
		if(image_dragging,
			add(xpos, mouse.x, mouse_x_offset);
			sub(xmax, plugin[%3].width, plugin[%2].width);
			if(xpos LT 0, set(xpos,0));
			if(xpos GT xmax, copy(xpos,xmax));
			copy(plugin[%2].x, xpos);

			<!-- val = 0.0 ... 1.0 -->
			div(val, xpos, xmax);
			apply_settings(%1);

			delayedcall(0.01, dragslider(%1,%2,%3) );
		  ,
			plugin[%2].changeorigin(get(plugin[%2].backup_align), get(plugin[%2].backup_edge));
		  );
	</action>


	<action name="apply_settings">	 
		if( %1 == ath , sub(val,.5); mul(val,360); roundval(val,2); );
		if( %1 == atv , sub(val,.5); mul(val,180); roundval(val,2); );
		if( %1 == rotate , sub(val,.5); mul(val,360); roundval(val,2); );

		set(hotspot[pano_f].%1, get(val));
		showvaltext(%1);
		
		update_faces();
	</action>
	
	
	<action name="showvaltext">
		txtadd(msg,%1,' = ',get(val));
		showtext(get(msg));
	</action>			
</krpano>
